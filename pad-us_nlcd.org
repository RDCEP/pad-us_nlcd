#+TITLE:     pad-us_nlcd.org
#+AUTHOR:    Neil Best
#+EMAIL:     nbest@ci.uchicago.edu
#+DATE:      2012-04-13 Fri
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+PROPERTY session *R:2*


* initialize the session

#+NAME: init
#+BEGIN_SRC R
  ## library( raster)
  library( raster, lib.loc="~/src/raster/lib/")
  setOptions( progress= "text")
  setOptions( maxmemory= 1e+06)
  library( plyr)
  library( stringr)
  
  overwriteRasters <- FALSE
  
  setGapZero <- function( gap, grid) {
    ifelse( is.na( gap) & !is.na( grid), 0, gap)
  }
  
  gridProjFunc <- function( cell) {
    cellFromXY( world,
               project( xyFromCell( prGrid, cell),
                       projection( prGrid),
                       inv= TRUE))
  }
  
#+END_SRC
* process Puerto Rico to work out steps

#+NAME: grid
#+BEGIN_SRC R
  
  pr <- raster( "nlcd2006/pr_landcover_wimperv_10-28-08_se5.img")
  NAvalue( pr) <- 0
  pr <- setMinMax( pr)
  
  prGrid <- try( raster( "prGrid.tif"), silent= TRUE)
  if( inherits( prGrid, "try-error") || overwriteRasters) {             
    prGrid <- raster( pr)
    prGrid[] <- seq( 1, ncell( prGrid))
    prGrid <-
      mask( prGrid, pr,
           filename= "prGrid.tif",
           overwrite= TRUE,
           progress= "text")
  }
  
  world <- raster()
  res( world) <- 5/60
  
  
  prWorld <- try( raster( "world_5min_PuertoRico.tif"), silent= TRUE)
  if( inherits( prWorld, "try-error") || overwriteRasters) {             
    prWorld <-
      calc( prGrid, gridProjFunc,
           filename= "world_5min_PuertoRico.tif",
           datatype= "INT4U",
           overwrite= TRUE,
           progress= "text")
  }
  
  prGap <- raster( "pad-us/PADUS1_2_regions/PADUS1_2_PuertoRico_GAP.tif")
  prGap <- setMinMax( prGap)
  NAvalue( prGap) <- 255
    
  prGap <- overlay( prGap, prGrid, fun= setGapZero,
                   filename= "prGap.tif", datatype= "INT1U", progress= "text", overwrite= TRUE)
  NAvalue( prGap) <- 255
  
  
  prStack <- stack(prWorld, pr, prGap)
  layerNames( prStack) <- c( "grid", "nlcd", "gap")
  
  ct <- crosstab( prStack, useNA= "always", long= TRUE, responseName= "n", progress="text")
#+END_SRC

* extend PR example for batch processing
** load NLCD rasters
#+BEGIN_SRC R
  
  ## regions <- c( "Alaska", "Hawaii", "CUSA", "PuertoRico")
  ## names( regions) <- regions
  ## nlcdFiles <-
  ##   list.files( "nlcd2006",
  ##              patt="^(ak|hi|nlcd2006|pr).*?img$",
  ##              full.names= TRUE)
  ## names( nlcdFiles) <- regions
  
  ## regions <- regions[ c( 4, 2, 1, 3)]
  
  ## nlcdRasters <-
  ##   llply( regions,
  ##         function ( region) {
  ##           r <- raster( nlcdFiles[[ region]])
  ##           NAvalue( r) <- 0
  ##           ## r <- setMinMax( r)
  ##           layerNames( r) <- region
  ##           r
  ##         })
  
  regionPatterns <-
    list( PuertoRico= "pr.*?img$",
          Hawaii= "hi.*?img$",
          Alaska= "ak.*?img$",
          cUSA= "nlcd2006.*?img$")
  
  regions <- names( regionPatterns)
  names( regions) <- names( regionPatterns)
          
  nlcdRasters <-
    llply( regionPatterns,
          function( patt) {
            r <- raster( list.files( "nlcd2006",
                                    patt= patt,
                                    full.names= TRUE))
            NAvalue( r) <- 0
            r
          })
  
#+END_SRC

** calculate 5' cell ID for each 30m pixel
  
#+BEGIN_SRC R
  dataType(world) <- "INT4U"
  world[] <- seq( 1, ncell( world))
  world <- writeRaster( world, "world5min.tif",
                       datatype= "INT4U",
                       overwrite= TRUE)*
#+END_SRC

#+BEGIN_SRC sh
  make grid
#+END_SRC

#+BEGIN_SRC R

#+END_SRC

** add zeroes to GAP data for unprotected land and coastal areas

#+BEGIN_SRC R :session *R:2*
  gapFiles <-
    list.files( "pad-us/PADUS1_2_regions/",
               patt= "^PADUS1_2_.*?tif$",
               full.names= TRUE)
  names( gapFiles) <-
    str_match( gapFiles,
              "PADUS1_2_([^_]+)_GAP\\.tif$")[, 2]
  
  gapRasters <-
    llply( names( regionPatterns),
          function ( region) {
            r <- raster( gapFiles[[ region]])
            NAvalue( r) <- 255
            ## r <- setMinMax( r)
            layerNames( r) <- region
            r
  })
  names( gapRasters) <- names( regionPatterns)
  
  gapOverlayFunc <-
    function ( gap, nlcd) {
      fn <- sprintf( "gap%s.grd", layerNames( gap))
      if( overwriteRasters | !file.exists( fn)) {
        overlay( gap, nlcd,
                fun= setGapZero,
                filename= fn,
                datatype= "INT1U",
                overwrite= TRUE)
      } else try( raster( fn), silent= TRUE)
    }
  
  ## prOverlay <- gapOverlayFunc( gapRasters[[ "PuertoRico"]],
  ##                             nlcdRasters[[ "PuertoRico"]])
  
  gapOverlays <-
    mapply( gapRasters, nlcdRasters,
           FUN= gapOverlayFunc) 
  
  gapOverlays <-
    llply( regions,
          function( region) {
            gapOverlayFunc( gapRasters[[ region]],
                           nlcdRasters[[ region]])
          })
  
#+END_SRC


** create stacks and tabulate

#+NAME: stacks
#+BEGIN_SRC R
  prStack <- stack(prWorld, pr, prGap)
  layerNames( prStack) <- c( "grid", "nlcd", "gap")
  
  prStack <- stack( raster( "aeaGrid5minPuertoRico.img"),
                   nlcdRasters[[ "PuertoRico"]],
                   prOverlay)
  
  prLowRes <- raster( prStack)
  res( prLowRes) <- 3000
  
  prStackSmall <- resample( prStack, prLowRes, method= "ngb")
  layerNames( prStackSmall) <- c( "grid", "nlcd", "gap")
  
  prCt <- crosstab( prStackSmall, long= TRUE, responseName= "n")
  
  prCt <- crosstab( prStack, long= TRUE)
  
  
  aeaGridFunc <-
    function( region) {
      raster( sprintf( "aeaGrid5min%s.img", region))
    }
    
  aeaGrids <- llply( regions, aeaGridFunc)
                    
  gapStackFunc <-
    function( region) {
      s <- stack( aeaGrids[[ region]],
                 nlcdRasters[[ region]],
                 gapOverlays[[ region]])
      layerNames( s) <- c( "grid", "nlcd", "gap")
      s
    }
                 
  gapStacks <- llply( regions, gapStackFunc)
          
  writeCrosstabs <-
    function( region) {
      fn <- sprintf( "pad-us_nlcd_%s.csv", region)
      ct <- crosstab( gapStacks[[ region]])
      write.csv( ct, row.names= FALSE, file= fn)
      fn
    }
  
  ctFiles <- llply( regions, writeCrosstabs)
#+END_SRC
